name: CI Pipeline

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ steps.set_status.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Fix files permissions
        run: chmod -R +x node_modules/.bin

      - name: Run linter
        run: npm run lint

      - name: Run formatter
        run: npm run prettier -- --check .

      - name: Run tests
        run: CI=true npm test

      - name: Build project
        run: npm run build

      - name: Set build status
        id: set_status
        run: echo "success=true" >> $GITHUB_OUTPUT

  deploy-app:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      app_ip: ${{ steps.get_ip.outputs.app_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init & Apply (app-server)
        working-directory: ./infra
        run: |
          terraform init
          terraform destroy -auto-approve || true
          terraform apply -auto-approve
        env:
          TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
          TF_VAR_ssh_fingerprint: ${{ secrets.SSH_FINGERPRINT }}

      - name: Get app-server Public IP
        id: get_ip
        working-directory: ./infra
        run: |
          echo "app_ip=$(terraform output -raw ip_address)" >> $GITHUB_OUTPUT

  deploy-jmeter:
    runs-on: ubuntu-latest
    needs: deploy-app
    outputs:
      jmeter_ip: ${{ steps.get_ip.outputs.jmeter_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init & Apply (jmeter-server)
        working-directory: ./infra-jmeter
        run: |
          terraform init
          terraform destroy -auto-approve || true
          terraform apply -auto-approve -var="target_app_ip=${{ needs.deploy-app.outputs.app_ip }}"
        env:
          TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
          TF_VAR_ssh_fingerprint: ${{ secrets.SSH_FINGERPRINT }}

      - name: Get jmeter-server Public IP
        id: get_ip
        working-directory: ./infra-jmeter
        run: |
          echo "jmeter_ip=$(terraform output -raw ip_address)" >> $GITHUB_OUTPUT

  show-report-url:
    runs-on: ubuntu-latest
    needs: deploy-jmeter
    steps:
      - name: Show JMeter Report URL
        run: |
          echo "Access the JMeter report at: http://${{ needs.deploy-jmeter.outputs.jmeter_ip }}/report/"
